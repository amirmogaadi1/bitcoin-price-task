{"version":3,"sources":["models/CurrentPriceModel.ts","utils/httpCommon.ts","utils/numbersUtils.ts","App.tsx","service/CoinDeskService.ts","reportWebVitals.ts","index.tsx"],"names":["CurrencyType","axios","create","baseURL","headers","currencyDecision","currency","App","price","useState","code","USD","rate_float","setCurrency","labels","datasets","chartData","setChartData","setCurrentPrice","type","http","get","getCurrentPriceByType","then","currentPriceData","data","bpi","getChartData","useCallback","getHistory","historyData","history","categories","Object","keys","values","label","fill","backgroundColor","borderColor","handleSelect","e","value","useEffect","currencyInterval","setInterval","clearInterval","className","Select","placeholder","onChange","options","text","Card","Content","Header","Description","toFixed","replace","plugins","title","display","legend","responsive","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58a423d8.chunk.js","sourcesContent":["export enum CurrencyType {\n  USD = 'USD',\n  EUR = 'EUR',\n  GBP = 'GBP',\n  CNY = 'CNY',\n  JPY = 'JPY',\n  PLN = 'PLN',\n}\n\nexport interface CurrentPrice {\n  code: CurrencyType;\n  rate?: string;\n  description?: string;\n  rate_float: number;\n}\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://api.coindesk.com/v1/bpi',\n  headers: {\n    'Content-type': 'application/json',\n  },\n});\n","export function formatPrice(price: number): string {\n  return price.toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nexport function currencyDecision(currency: string): string {\n  switch (currency) {\n    case 'USD':\n      return '$';\n    case 'EUR':\n      return '€';\n    case 'GBP':\n      return '£';\n    case 'CNY':\n      return '¥';\n    case 'JPY':\n      return 'JP¥';\n    case 'PLN':\n      return 'zł';\n    default:\n      return currency;\n  }\n}\n","import React, {SyntheticEvent, useCallback, useEffect, useState} from 'react';\nimport {Card, DropdownProps, Select} from 'semantic-ui-react';\nimport {Line} from 'react-chartjs-2';\n\nimport {getCurrentPriceByType, getHistory} from './service/CoinDeskService';\n\nimport {currencyDecision, formatPrice} from './utils/numbersUtils';\n\nimport {CurrencyType, CurrentPrice} from './models/CurrentPriceModel';\nimport {ChartData} from './models/ChartDataModel';\n\nimport './App.scss';\n\nfunction App() {\n  const [currency, setCurrency] = useState<CurrentPrice>({\n    code: CurrencyType.USD,\n    rate_float: 0,\n  });\n\n  const [chartData, setChartData] = useState<ChartData>({\n    labels: [],\n    datasets: [],\n  });\n\n  const setCurrentPrice = (type: CurrencyType): void => {\n    getCurrentPriceByType(type).then((currentPriceData) => {\n      setCurrency({...currentPriceData.data.bpi[type]});\n    });\n  };\n\n  const getChartData = useCallback(\n    (type: CurrencyType): void => {\n      getHistory(type).then((historyData) => {\n        const history = historyData.data.bpi;\n        const categories = Object.keys(history);\n        const data: number[] = Object.values(history);\n        setChartData({\n          labels: categories,\n          datasets: [\n            {\n              label: `${currency.code} Price`,\n              data,\n              fill: true,\n              backgroundColor: '#4BC0C033',\n              borderColor: '#4BC0C0FF',\n            },\n          ],\n        });\n      });\n    },\n    [currency.code],\n  );\n\n  const handleSelect = useCallback(\n    (e: SyntheticEvent, {value}: DropdownProps): void => {\n      setCurrentPrice(value as CurrencyType);\n      getChartData(value as CurrencyType);\n    },\n    [getChartData],\n  );\n\n  useEffect(() => {\n    setCurrentPrice(currency.code);\n    getChartData(currency.code);\n    const currencyInterval = setInterval(() => {\n      setCurrentPrice(currency.code);\n    }, 5000);\n    return () => {\n      clearInterval(currencyInterval);\n    };\n  }, [currency.code, getChartData]);\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"nav-bar\">Bitcoin price task app</div>\n      <div className=\"price-container\">\n        <Select\n          placeholder=\"Select your currency\"\n          value={currency.code}\n          onChange={handleSelect}\n          options={[\n            {value: 'USD', text: 'USD'},\n            {value: 'EUR', text: 'EUR'},\n            {value: 'GBP', text: 'GBP'},\n            {value: 'CNY', text: 'CNY'},\n            {value: 'JPY', text: 'JPY'},\n            {value: 'PLN', text: 'PLN'},\n          ]}\n        />\n        <Card className=\"card-container\">\n          <Card.Content>\n            <Card.Header>{currency.code} Price</Card.Header>\n            <Card.Description>\n              {currencyDecision(currency.code)}{' '}\n              {formatPrice(currency.rate_float)}\n            </Card.Description>\n          </Card.Content>\n        </Card>\n      </div>\n      <div className=\"chart-container\">\n        <div>\n          <Line\n            data={chartData}\n            options={{\n              plugins: {\n                title: {\n                  display: true,\n                  text: 'Bitcoin price',\n                },\n                legend: {\n                  display: false,\n                },\n              },\n              responsive: true,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import http from '../utils/httpCommon';\nimport {CurrencyType} from '../models/CurrentPriceModel';\nimport {\n  CurrentChartDataModel,\n  CurrentPriceDataModel,\n} from '../models/PriceDataModel';\n\nexport const getCurrentPriceByType = (type: CurrencyType) => {\n  return http.get<CurrentPriceDataModel>(`/currentprice/${type}.json`);\n};\n\nexport const getHistory = (type: CurrencyType) => {\n  return http.get<CurrentChartDataModel>(\n    `/historical/close.json?currency=${type}`,\n  );\n};\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}